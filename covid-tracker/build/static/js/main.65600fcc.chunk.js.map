{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["Infobox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","multiplier","option","fillColor","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","useState","setmap","flyTo","whenCreated","maxZoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65600fcc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./InfoBox.css\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nfunction Infobox({ title, cases, isRed, active, total, ...props }) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${isRed &&\n        \"infoBox--red\"}`}\n    >\n      <CardContent>\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default Infobox;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    multiplier: 800,\n    option: { color: \"#cc1034\", fillColor: \"#cc1034\" }\n  },\n  recovered: {\n    multiplier: 1200,\n    option: { color: \"#7dd71d\", fillColor: \"#7dd71d\" }\n  },\n  deaths: {\n    multiplier: 2000,\n    option: { color: \"#ff6c47\", fillColor: \"#ff6c47\" }\n  }\n};\n\nexport const sortData = data => {\n  const sortedData = [...data];\n\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n};\n\nexport const prettyPrintStat = stat =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map(country => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      pathOptions={casesTypeColors[casesType].option}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React, { useState } from \"react\";\nimport \"./Map.css\";\nimport { MapContainer as LeafletMap, TileLayer, useMap } from \"react-leaflet\";\nimport { showDataOnMap } from \"./util\";\n\nfunction ChangeMap({ center, zoom }) {\n  const map = useMap();\n  map.setView(center, zoom);\n  return null;\n}\n\nfunction Map({ countries, casesType, center, zoom }) {\n  const [map, setmap] = useState(null);\n  if (map) {\n    map.flyTo(center);\n  }\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom} whenCreated={setmap} maxZoom={14}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases }) => (\n        <tr>\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function(tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\"\n        }\n      }\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function(value, index, values) {\n            return numeral(value).format(\"0a\");\n          }\n        }\n      }\n    ]\n  }\n};\n\nconst buildChartData = (data, casesType = \"cases\") => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType = \"cases\", ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then(response => {\n          return response.json();\n        })\n        .then(data => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data\n              }\n            ]\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport \"./App.css\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then(response => response.json())\n        .then(data => {\n          const countries = data.map(country => ({\n            name: country.country,\n            value: country.countryInfo.iso2\n          }));\n\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async event => {\n    const countryCode = event.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  console.log(\"COUNTRY INFO >>>>>>>>>>\", countryInfo);\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map(country => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={e => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={e => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={e => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide New {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}